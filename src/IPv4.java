/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import static java.lang.System.*;
/**
 *
 * @author block4
 */
public class IPv4 extends javax.swing.JFrame {

    /**
     * Creates new form IPv4
     */
    private int dec1, dec2, dec3, dec4, decsub;
    private String bin1, bin2, bin3, bin4, binsub1, binsub2, binsub3, binsub4;
    int subcounter;
    
    char c;
    String netaddress, netbroadaddress;
    String binsa1, binsa2, binsa3, binsa4, satotal;
    String binisa1, binisa2, binisa3, binisa4;
    String binsba1, binsba2, binsba3, binsba4, sbatotal;
    
    String binipstring, binsubstring;
    int tempnum, maxsubnets;
    String tempbinip, tempbinsub;
    int subnumber, subnumbercounter;
    int maxhosts;
    int hostnumber, hostnumbercounter;
    String binipstringreverse, binsubstringreverse;
    
    public IPv4() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form. WARNING: Do NOT modify this
     * code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonDecimal = new javax.swing.JButton();
        buttonBinary = new javax.swing.JButton();
        fieldBinIP1 = new javax.swing.JTextField();
        fieldBinIP2 = new javax.swing.JTextField();
        fieldBinIP3 = new javax.swing.JTextField();
        fieldBinIP4 = new javax.swing.JTextField();
        fieldBinSN1 = new javax.swing.JTextField();
        fieldBinSN2 = new javax.swing.JTextField();
        fieldBinSN3 = new javax.swing.JTextField();
        fieldBinSN4 = new javax.swing.JTextField();
        fieldDecIP1 = new javax.swing.JTextField();
        fieldDecIP2 = new javax.swing.JTextField();
        fieldDecIP3 = new javax.swing.JTextField();
        fieldDecIP4 = new javax.swing.JTextField();
        fieldDecSN1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonDecimal.setText("From Decimal");
        buttonDecimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDecimalActionPerformed(evt);
            }
        });

        buttonBinary.setText("From Binary");
        buttonBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBinaryActionPerformed(evt);
            }
        });

        fieldBinIP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldBinIP2ActionPerformed(evt);
            }
        });

        fieldDecIP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldDecIP1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Decimal");

        jLabel2.setText("Binary IP");

        jLabel3.setText("Binary SM");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(fieldBinSN1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fieldBinIP1, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fieldBinIP2)
                                    .addComponent(fieldBinSN2, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fieldBinIP3)
                                    .addComponent(fieldBinSN3, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fieldBinIP4)
                                    .addComponent(fieldBinSN4, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(buttonDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buttonBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fieldDecIP1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fieldDecIP2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fieldDecIP3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fieldDecIP4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addComponent(fieldDecSN1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDecimal)
                    .addComponent(buttonBinary))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldDecIP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldDecIP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldDecIP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldDecIP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldDecSN1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldBinIP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldBinIP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldBinIP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldBinIP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldBinSN1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldBinSN2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldBinSN3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldBinSN4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fieldBinIP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldBinIP2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldBinIP2ActionPerformed

    private void fieldDecIP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldDecIP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldDecIP1ActionPerformed

    private void buttonDecimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDecimalActionPerformed
        // TODO add your handling code here:
        bin1 = toBinary(fieldDecIP1.getText());
        bin2 = toBinary(fieldDecIP2.getText());
        bin3 = toBinary(fieldDecIP3.getText());
        bin4 = toBinary(fieldDecIP4.getText());
        
        subcounter = Integer.parseInt(fieldDecSN1.getText());
        
        binsub1="";
        binsub2="";
        binsub3="";
        binsub4="";
        
        for(int i = 0; i<=32; i++)
        {
            if(subcounter > 0)
            {
                if(binsub1.length()<8)
                {
                    binsub1+="1";
                }
                else if(binsub2.length()<8)
                {
                    binsub2+="1";
                }
                else if(binsub3.length()<8)
                {
                    binsub3+="1";
                }
                else if(binsub4.length()<8)
                {
                    binsub4+="1";
                }
                subcounter--;
            }
            else
            {
                if(binsub1.length()<8)
                {
                    binsub1+="0";
                }
                else if(binsub2.length()<8)
                {
                    binsub2+="0";
                }
                else if(binsub3.length()<8)
                {
                    binsub3+="0";
                }
                else if(binsub4.length()<8)
                {
                    binsub4+="0";
                }
            }
        }
        
        fieldBinIP1.setText(bin1);
        fieldBinIP2.setText(bin2);
        fieldBinIP3.setText(bin3);
        fieldBinIP4.setText(bin4);
        
        fieldBinSN1.setText(binsub1);
        fieldBinSN2.setText(binsub2);
        fieldBinSN3.setText(binsub3);
        fieldBinSN4.setText(binsub4);
        
        getInfo();
        
    }//GEN-LAST:event_buttonDecimalActionPerformed

    private void buttonBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBinaryActionPerformed
        // TODO add your handling code here:
        dec1 = Integer.parseInt(fieldBinIP1.getText(), 2);
        dec2 = Integer.parseInt(fieldBinIP2.getText(), 2);
        dec3 = Integer.parseInt(fieldBinIP3.getText(), 2);
        dec4 = Integer.parseInt(fieldBinIP4.getText(), 2);
        
        decsub = 0;
        
        for(int i=0; i<=31; i++)
        {
            if(i<8)
            {
                if(fieldBinSN1.getText().charAt(i) == '1')
                    decsub++;
                    
                else
                    break;
            }
            else if(i>7 && i<16)
            {
                if(fieldBinSN2.getText().charAt(i-8) == '1')
                    decsub++;
                else
                    break;
            }
            else if(i>15 && i<24)
            {
                if(fieldBinSN3.getText().charAt(i-16) == '1')
                    decsub++;
                else
                    break;
            }
            else
            {
                if(fieldBinSN4.getText().charAt(i-24) == '1')
                    decsub++;
                else
                    break;
            }
            
        }
        
        fieldDecIP1.setText(Integer.toString(dec1));
        fieldDecIP2.setText(Integer.toString(dec2));
        fieldDecIP3.setText(Integer.toString(dec3));
        fieldDecIP4.setText(Integer.toString(dec4));
        
        fieldDecSN1.setText(Integer.toString(decsub));
        
        subcounter = Integer.parseInt(fieldDecSN1.getText());
        
        getInfo();
        
    }//GEN-LAST:event_buttonBinaryActionPerformed

    private String toBinary(String s)
    {
        s = Integer.toBinaryString(Integer.parseInt(s));
        while(s.length() < 8)
        {
            s = "0" + s;
        }
        return s;
    }
    
    private void getInfo()
    {
        
        //Get Network Class
        
        if(fieldBinIP1.getText().charAt(0) == '1')
        {
            if(fieldBinIP1.getText().charAt(1) == '1')
                c = 'C';
            else
                c = 'B';
        }
        else
            c = 'A';
        
        //Get Network Address
        
        switch(c)
        {
            case 'A': netaddress = fieldDecIP1.getText() + ".0.0.0";
                break;
            case 'B': netaddress = fieldDecIP1.getText() + "." + fieldDecIP2.getText() + ".0.0";
                break;
            case 'C': netaddress = fieldDecIP1.getText() + "." + fieldDecIP2.getText() + "." + fieldDecIP3.getText() + ".0";    
                break;
        }
        
        //Get Network Broadcast Address
        
        switch(c)
        {
            case 'A': netbroadaddress = fieldDecIP1.getText() + ".255.255.255";
                break;
            case 'B': netbroadaddress = fieldDecIP1.getText() + "." + fieldDecIP2.getText() + ".255.255";
                break;
            case 'C': netbroadaddress = fieldDecIP1.getText() + "." + fieldDecIP2.getText() + "." + fieldDecIP3.getText() + ".255";    
                break;
        }
        
        //Get Subnet Address
        
        binsa1 ="";
        binsa2 ="";
        binsa3 ="";
        binsa4 ="";
        
        for(int i = 0; i<=31; i++)
        {
            if(i<8)
            {
                if(fieldBinSN1.getText().charAt(i) == '1' && fieldBinIP1.getText().charAt(i) == '1')
                    binsa1+="1";
                else
                    binsa1+="0";
            }
            if(i>7 && i<16)
            {
                if(fieldBinSN2.getText().charAt(i-8) == '1' && fieldBinIP2.getText().charAt(i-8) == '1')
                    binsa2+="1";
                else
                    binsa2+="0";
            }
            else if(i>15 && i<24)
            {
                if(fieldBinSN3.getText().charAt(i-16) == '1' && fieldBinIP3.getText().charAt(i-16) == '1')
                    binsa3+="1";
                else
                    binsa3+="0";
            }
            else if(i>23)                                                       
            {
                if(fieldBinSN4.getText().charAt(i-24) == '1' && fieldBinIP4.getText().charAt(i-24) == '1')
                    binsa4+="1";
                else
                    binsa4+="0";
            }
        }
        
        satotal = Integer.parseInt(binsa1, 2) + "." + Integer.parseInt(binsa2, 2) + "." + Integer.parseInt(binsa3, 2) + "." + Integer.parseInt(binsa4, 2);
        
        //Get Subnet Broadcast Address
        
        binisa1 = fieldBinSN1.getText();
        binisa1 = binisa1.replace('1','2');
        binisa1 = binisa1.replace('0','1');
        binisa1 = binisa1.replace('2','0');
        binisa2 = fieldBinSN2.getText();
        binisa2 = binisa2.replace('1','2');
        binisa2 = binisa2.replace('0','1');
        binisa2 = binisa2.replace('2','0');
        binisa3 = fieldBinSN3.getText();
        binisa3 = binisa3.replace('1','2');
        binisa3 = binisa3.replace('0','1');
        binisa3 = binisa3.replace('2','0');
        binisa4 = fieldBinSN4.getText();
        binisa4 = binisa4.replace('1','2');
        binisa4 = binisa4.replace('0','1');
        binisa4 = binisa4.replace('2','0');
        
        binsba1 = "";
        binsba2 = "";
        binsba3 = "";
        binsba4 = "";
        
        for(int i = 0; i<=31; i++)
        {
            if(i<8)
            {
                if(binsa1.charAt(i) == '1' || binisa1.charAt(i) == '1')
                    binsba1+="1";
                else
                    binsba1+="0";
            }
            if(i>7 && i<16)
            {
                if(binsa2.charAt(i-8) == '1' || binisa2.charAt(i-8) == '1')
                    binsba2+="1";
                else
                    binsba2+="0";
            }
            else if(i>15 && i<24)
            {
                if(binsa3.charAt(i-16) == '1' || binisa3.charAt(i-16) == '1')
                    binsba3+="1";
                else
                    binsba3+="0";
            }
            else if(i>23)                                                       
            {
                if(binsa4.charAt(i-24) == '1' || binisa4.charAt(i-24) == '1')
                    binsba4+="1";
                else
                    binsba4+="0";
            }
        }
        
        sbatotal = Integer.parseInt(binsba1, 2) + "." + Integer.parseInt(binsba2, 2) + "." + Integer.parseInt(binsba3, 2) + "." + Integer.parseInt(binsba4, 2);
        
        //Max # of subnets
        
        binipstring = fieldBinIP1.getText() + fieldBinIP2.getText() + fieldBinIP3.getText() + fieldBinIP4.getText();
        binsubstring = fieldBinSN1.getText() + fieldBinSN2.getText() + fieldBinSN3.getText() + fieldBinSN4.getText();

        tempnum = Integer.parseInt(fieldDecSN1.getText());
        switch(c)
        {
            case 'A': tempnum-=8;
                break;
            case 'B': tempnum-=16;
                break;
            case 'C': tempnum-=24;    
                break;
        }
        maxsubnets=(int)(Math.pow(2,tempnum)-2);
        
        //Subnet #
        
        switch(c)
        {
            case 'A': tempbinip = binipstring.substring(8);
                      tempbinsub = binsubstring.substring(8);
                break;
            case 'B': tempbinip = binipstring.substring(16);
                      tempbinsub = binsubstring.substring(16);
                break;
            case 'C': tempbinip = binipstring.substring(24);
                      tempbinsub = binsubstring.substring(24);   
                break;
        }
        subnumber = 0;
        subnumbercounter = 0;
        
        for(int i = tempbinip.length()-1;i>=0; i--)
        {
            if(tempbinsub.charAt(i) == '1')
            {
                
                if(tempbinip.charAt(i) == '1')
                {
                subnumber+= Math.pow(2, subnumbercounter);
                }
                subnumbercounter++;
            }
        }
        
        //Max # of hosts
        
        maxhosts = (int)(Math.pow(2,binsubstring.replaceAll("1","").length())-2);
        
        //Host #
        
        hostnumber = 0;
        hostnumbercounter = 0;
        
        binipstringreverse = new StringBuffer(binipstring).reverse().toString();
        binsubstringreverse = new StringBuffer(binsubstring).reverse().toString();
        
        while(binsubstringreverse.charAt(hostnumbercounter) == '0')
        {
            if(binipstringreverse.charAt(hostnumbercounter) == '1')
                hostnumber+=Math.pow(2,hostnumbercounter); 
            hostnumbercounter++; 
        }

        jTextArea1.setText("Class :: " + c + 
                            "\nNetwork Address :: " + netaddress + 
                            "\nNetwork Broadcast Address :: " + netbroadaddress + 
                            "\nSubnet Address :: " + satotal + 
                            "\nSubnet Broadcast Address :: " + sbatotal +
                            "\nMax # Subnets :: " + maxsubnets +
                            "\nSubnet # :: " + subnumber +
                            "\nMax # Hosts :: " + maxhosts + 
                            "\nHost # :: " + hostnumber);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IPv4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IPv4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IPv4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IPv4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IPv4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBinary;
    private javax.swing.JButton buttonDecimal;
    private javax.swing.JTextField fieldBinIP1;
    private javax.swing.JTextField fieldBinIP2;
    private javax.swing.JTextField fieldBinIP3;
    private javax.swing.JTextField fieldBinIP4;
    private javax.swing.JTextField fieldBinSN1;
    private javax.swing.JTextField fieldBinSN2;
    private javax.swing.JTextField fieldBinSN3;
    private javax.swing.JTextField fieldBinSN4;
    private javax.swing.JTextField fieldDecIP1;
    private javax.swing.JTextField fieldDecIP2;
    private javax.swing.JTextField fieldDecIP3;
    private javax.swing.JTextField fieldDecIP4;
    private javax.swing.JTextField fieldDecSN1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
